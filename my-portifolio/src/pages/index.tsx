import {
  createRef,
  forwardRef,
  useEffect,
  useImperativeHandle,
  useLayoutEffect,
  useRef,
  useState,
} from "react";
import Head from "next/head";
import {
  Header,
  Content,
  AboutMe,
  Experience,
  Schooling,
  Repositories,
} from "@/components/export";
import { gsap } from "gsap";
import debounce from "@/controllers/debounce";
import experience from "@/models/experience";

interface Scroll {
  focus?: boolean;
  up?: boolean;
  down?: boolean;
  page: number;
  current?: number;
}

export default function Home(): JSX.Element {
  const itemsRef = useRef<HTMLDivElement>(null);
  const [activeTab, setActiveTab] = useState("Welcome");
  const [heightView, setHeightView] = useState(0);
  const [lastScrollPosition, setLastScrollPosition] = useState(0);
  const [scroll, setScroll] = useState<Scroll>({
    focus: false,
    up: false,
    down: false,
    page: 0,
    current: 0,
  });
  const activeTabTypes = [
    "Welcome",
    "Perfil",
    "Experiencias",
    "Escolaridade",
    "Projetos",
  ];
  const gsapParms = {
    end: {
      opacity: 1,
      x: 0,
      duration: 1.5,
      delay: 0.2,
      ease: "power3.out",
    },
    start: {
      opacity: 0,
      x: -500,
      duration: 1,
      delay: 0,
      ease: "power3.out",
    },
  };

  const handleActiveTab = (tab: string) => {
    setActiveTab(tab);
    activeTabTypes.map((element, index) => {
      if (tab === element) {
        setScroll({ page: index });
      }
    });
  };

  function numberBetween(
    constante: number,
    value: { min: number; max: number }
  ): boolean {
    return constante >= value.min && constante <= value.max ? true : false;
  }

  useEffect(() => {
    // itemsRef.style.overflowY = "scroll";
    // itemsRef.style.visibility = "hidden";
    function handleSize() {
      setHeightView(window.innerHeight);
    }

    handleSize();
  }, []);

  useEffect(() => {
    const scrollPosition =
      window.pageYOffset || document.documentElement.scrollTop;
    const debouncedFn = debounce(() => {
      const scrollPosition =
        window.pageYOffset || document.documentElement.scrollTop;
      const visibleHeight = document.documentElement.clientHeight;
      const totalHeight = document.documentElement.scrollHeight;
      const scrolledAmount = totalHeight - visibleHeight - scrollPosition;
      const items = itemsRef.current?.children;

      let down = scrollPosition > scrolledAmount ? true : false;

      if (items) {
        // Array.from(items).forEach((item, index) => {
        //   item.classList.add("hidden");
        // });

        if (numberBetween(scroll?.page, { min: 0, max: 4 })) {
          setScroll({
            focus: true,
            down: down,
            page: down ? scroll?.page + 1 : scroll?.page - 1,
            current: scrollPosition,
          });
        } else {
          setScroll({
            focus: false,
            down: false,
            page: 0,
            current: 0,
          });
        }
        setLastScrollPosition(scrollPosition);
      }
    }, 50);

    window.addEventListener("scroll", debouncedFn);

    return () => {
      window.removeEventListener("scroll", debouncedFn);
    };
  }, [scroll]);

  useEffect(() => {
    const items = itemsRef.current?.children;

    const tl = gsap.timeline();
    if (items && scroll?.page >= 0 && scroll?.page < 5) {
      Array.from(items).forEach((item, index) => {
        let element = null;
        if (scroll?.page === index) {
          element = item;

          // tl.to(element, gsapParms.start);
          // tl.to(element, gsapParms.end);
          setActiveTab(activeTabTypes[index]);
        }
      });
    }
  }, [scroll]);

  return (
    <>
      <Head>
        <title>Portifolio</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        {/* <link rel="icon" href="/favicon.ico" /> */}
      </Head>
      <Header activeTab={activeTab} onClick={handleActiveTab} />
      <main>
        <div className="relative flex flex-col items-center" ref={itemsRef}>
          <Content
            className={`bg-welcome`}
            title={`BEM VINDO AO MEU PORTIFOLIO`}
          />

          <Content className={`bg-content-1 AboutMe`} title={`Sobre mim`}>
            <AboutMe />
          </Content>

          <Content className={`bg-content-2`} title={`Experiencias`}>
            <Experience empresa={experience} />
          </Content>

          <Content className={`bg-content-3`} title={`Escolaridade`}>
            <Schooling />
          </Content>

          <Content className={`bg-content-4`} title={`Projetos`}>
            <Repositories />
          </Content>
        </div>
      </main>
    </>
  );
}
